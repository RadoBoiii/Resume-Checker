{"ast":null,"code":"// src/utils/documentParser.ts\nimport mammoth from 'mammoth';\nexport async function parseDocument(file) {\n  var _file$name$split$pop;\n  const fileType = (_file$name$split$pop = file.name.split('.').pop()) === null || _file$name$split$pop === void 0 ? void 0 : _file$name$split$pop.toLowerCase();\n  try {\n    switch (fileType) {\n      case 'pdf':\n        return await parsePDF(file);\n      case 'docx':\n        return await parseDocx(file);\n      case 'doc':\n        return {\n          text: '',\n          error: '.doc files are not directly supported. Please convert to .docx or .pdf and try again.'\n        };\n      case 'txt':\n      default:\n        return await parseTxt(file);\n    }\n  } catch (error) {\n    console.error('Error parsing document:', error);\n    return {\n      text: '',\n      error: `Failed to parse ${fileType} file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\nasync function parseTxt(file) {\n  try {\n    const text = await file.text();\n    return {\n      text\n    };\n  } catch (error) {\n    throw new Error(`Failed to parse text file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\nasync function parsePDF(file) {\n  try {\n    // Import PDF.js dynamically\n    const pdfjs = await import('pdfjs-dist');\n    // Set the worker source\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n    // Read file as ArrayBuffer\n    const arrayBuffer = await file.arrayBuffer();\n\n    // Load PDF document\n    const pdf = await pdfjs.getDocument({\n      data: arrayBuffer\n    }).promise;\n    const numPages = pdf.numPages;\n    let text = '';\n\n    // Extract text from each page\n    for (let i = 1; i <= numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      const pageText = content.items.filter(item => 'str' in item).map(item => item.str).join(' ');\n      text += pageText + '\\n';\n    }\n    return {\n      text\n    };\n  } catch (error) {\n    console.error('PDF parsing error:', error);\n    throw new Error(`Failed to parse PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\nasync function parseDocx(file) {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const result = await mammoth.extractRawText({\n      arrayBuffer\n    });\n    return {\n      text: result.value\n    };\n  } catch (error) {\n    throw new Error(`Failed to parse DOCX: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}","map":{"version":3,"names":["mammoth","parseDocument","file","_file$name$split$pop","fileType","name","split","pop","toLowerCase","parsePDF","parseDocx","text","error","parseTxt","console","Error","message","pdfjs","GlobalWorkerOptions","workerSrc","version","arrayBuffer","pdf","getDocument","data","promise","numPages","i","page","getPage","content","getTextContent","pageText","items","filter","item","map","str","join","result","extractRawText","value"],"sources":["/Users/rishabhshinde/Documents/Resume Checker/src/utils/documentParser.ts"],"sourcesContent":["// src/utils/documentParser.ts\nimport mammoth from 'mammoth';\n\nexport interface ParserResult {\n  text: string;\n  error?: string;\n}\n\nexport async function parseDocument(file: File): Promise<ParserResult> {\n  const fileType = file.name.split('.').pop()?.toLowerCase();\n  \n  try {\n    switch (fileType) {\n      case 'pdf':\n        return await parsePDF(file);\n      case 'docx':\n        return await parseDocx(file);\n      case 'doc':\n        return {\n          text: '',\n          error: '.doc files are not directly supported. Please convert to .docx or .pdf and try again.'\n        };\n      case 'txt':\n      default:\n        return await parseTxt(file);\n    }\n  } catch (error) {\n    console.error('Error parsing document:', error);\n    return {\n      text: '',\n      error: `Failed to parse ${fileType} file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\nasync function parseTxt(file: File): Promise<ParserResult> {\n  try {\n    const text = await file.text();\n    return { text };\n  } catch (error) {\n    throw new Error(`Failed to parse text file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function parsePDF(file: File): Promise<ParserResult> {\n  try {\n    // Import PDF.js dynamically\n    const pdfjs = await import('pdfjs-dist');\n    // Set the worker source\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n    // Read file as ArrayBuffer\n    const arrayBuffer = await file.arrayBuffer();\n    \n    // Load PDF document\n    const pdf = await pdfjs.getDocument({ data: arrayBuffer }).promise;\n    const numPages = pdf.numPages;\n    let text = '';\n    \n    // Extract text from each page\n    for (let i = 1; i <= numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      const pageText = content.items\n        .filter((item: any) => 'str' in item)\n        .map((item: any) => item.str)\n        .join(' ');\n      text += pageText + '\\n';\n    }\n    \n    return { text };\n  } catch (error) {\n    console.error('PDF parsing error:', error);\n    throw new Error(`Failed to parse PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function parseDocx(file: File): Promise<ParserResult> {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const result = await mammoth.extractRawText({ arrayBuffer });\n    return { text: result.value };\n  } catch (error) {\n    throw new Error(`Failed to parse DOCX: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}